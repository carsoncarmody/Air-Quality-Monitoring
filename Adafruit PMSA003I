# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries
# SPDX-License-Identifier: MIT

"""
Example sketch to connect to PM2.5 sensor with either I2C or UART.
"""

# pylint: disable=unused-import
import time
import board
import busio
from digitalio import DigitalInOut, Direction, Pull
from adafruit_pm25.i2c import PM25_I2C

reset_pin = None
i2c = busio.I2C(board.SCL, board.SDA, frequency=100000)
pm25 = PM25_I2C(i2c, reset_pin)

from Adafruit_IO import Client, Feed
ADAFRUIT_IO_KEY = 'aio_mBHp06rMV9hkCRW8d2SIKlBdAP5N'
ADAFRUIT_IO_USERNAME = 'Ccarmo'
aio = Client(ADAFRUIT_IO_USERNAME, ADAFRUIT_IO_KEY)

pthree_feed = aio.feeds('pthree')
pfive_feed = aio.feeds('pfive')
one_feed = aio.feeds('one')
twopfive_feed = aio.feeds('twopfive')
five_feed = aio.feeds('five')
ten_feed = aio.feeds('ten')

pthree = pm25
pfive = pm25
one = pm25
twopfive = pm25
five = pm25
ten = pm25


print("Found PM2.5 sensor, reading data...")

while True:
    time.sleep(15)

    print('0.3={0:0.1f}*C 0.5={1:0.1f}% 1.0={2:0.1f}PPM'.format(0.3, 0.5, 1.0, 2.5, 5.0, 10))

    pthree = '%.2f'%(1)
    pfive = '%.2f'%(2)
    one = '%.2f'%(3)
    twopfive = '%.2f'%(4)
    five = '%.2f'%(5)
    ten = '%.2f'%(6)
    aio.send_data(pthree_feed.key, str(pthree))
    aio.send_data(pfive_feed.key, str(pfive))
    aio.send_data(one_feed.key, str(one))
    aio.send_data(twopfive_feed.key, str(twopfive))
    aio.send_data(five_feed.key, str(five))
    aio.send_data(ten_feed.key, str(ten))

    try:
        aqdata = pm25.read()
        # print(aqdata)
    except RuntimeError:
        print("Unable to read from sensor, retrying...")
        continue

    print()
    print("Concentration Units (standard)")
    print("---------------------------------------")
    print(
        "PM 1.0: %d\tPM2.5: %d\tPM10: %d"
        % (aqdata["pm10 standard"], aqdata["pm25 standard"], aqdata["pm100 standard"])
    )
    print("Concentration Units (environmental)")
    print("---------------------------------------")
    print(
        "PM 1.0: %d\tPM2.5: %d\tPM10: %d"
        % (aqdata["pm10 env"], aqdata["pm25 env"], aqdata["pm100 env"])
    )
    print("---------------------------------------")
    print("Particles > 0.3um / 0.1L air:", aqdata["particles 03um"])
    print("Particles > 0.5um / 0.1L air:", aqdata["particles 05um"])
    print("Particles > 1.0um / 0.1L air:", aqdata["particles 10um"])
    print("Particles > 2.5um / 0.1L air:", aqdata["particles 25um"])
    print("Particles > 5.0um / 0.1L air:", aqdata["particles 50um"])
    print("Particles > 10 um / 0.1L air:", aqdata["particles 100um"])
    print("---------------------------------------")





BACKUP CODE:

# SPDX-FileCopyrightText: 2021 ladyada for Adafruit Industries
# SPDX-License-Identifier: MIT

"""
Example sketch to connect to PM2.5 sensor with either I2C or UART.
"""

# pylint: disable=unused-import
import time
import board
import busio
from digitalio import DigitalInOut, Direction, Pull
from adafruit_pm25.i2c import PM25_I2C

reset_pin = None
i2c = busio.I2C(board.SCL, board.SDA, frequency=100000)
pm25 = PM25_I2C(i2c, reset_pin)

from Adafruit_IO import Client, Feed
ADAFRUIT_IO_KEY = 'aio_mBHp06rMV9hkCRW8d2SIKlBdAP5N'
ADAFRUIT_IO_USERNAME = 'Ccarmo'
aio = Client(ADAFRUIT_IO_USERNAME, ADAFRUIT_IO_KEY)

pthree_feed = aio.feeds('pthree')
pfive_feed = aio.feeds('pfive')
one_feed = aio.feeds('one')
twopfive_feed = aio.feeds('twopfive')
five_feed = aio.feeds('five')
ten_feed = aio.feeds('ten')

pthree = pm25
pfive = pm25
one = pm25
twopfive = pm25
five = pm25
ten = pm25


print("Found PM2.5 sensor, reading data...")

while True:
    time.sleep(15)

    print('0.3={0:0.1f}*C 0.5={1:0.1f}% 1.0={2:0.1f}PPM'.format(0.3, 0.5, 1.0, 2.5, 5.0, 10))

    pthree = '%.2f'%(1)
    pfive = '%.2f'%(2)
    one = '%.2f'%(3)
    twopfive = '%.2f'%(4)
    five = '%.2f'%(5)
    ten = '%.2f'%(6)
    aio.send_data(pthree_feed.key, str(pthree))
    aio.send_data(pfive_feed.key, str(pfive))
    aio.send_data(one_feed.key, str(one))
    aio.send_data(twopfive_feed.key, str(twopfive))
    aio.send_data(five_feed.key, str(five))
    aio.send_data(ten_feed.key, str(ten))

    try:
        aqdata = pm25.read()
        # print(aqdata)
    except RuntimeError:
        print("Unable to read from sensor, retrying...")
        continue

    print()
    print("Concentration Units (standard)")
    print("---------------------------------------")
    print(
        "PM 1.0: %d\tPM2.5: %d\tPM10: %d"
        % (aqdata["pm10 standard"], aqdata["pm25 standard"], aqdata["pm100 standard"])
    )
    print("Concentration Units (environmental)")
    print("---------------------------------------")
    print(
        "PM 1.0: %d\tPM2.5: %d\tPM10: %d"
        % (aqdata["pm10 env"], aqdata["pm25 env"], aqdata["pm100 env"])
    )
    print("---------------------------------------")
    print("Particles > 0.3um / 0.1L air:", aqdata["particles 03um"])
    print("Particles > 0.5um / 0.1L air:", aqdata["particles 05um"])
    print("Particles > 1.0um / 0.1L air:", aqdata["particles 10um"])
    print("Particles > 2.5um / 0.1L air:", aqdata["particles 25um"])
    print("Particles > 5.0um / 0.1L air:", aqdata["particles 50um"])
    print("Particles > 10 um / 0.1L air:", aqdata["particles 100um"])
    print("---------------------------------------")
